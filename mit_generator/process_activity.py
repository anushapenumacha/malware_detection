#!/usr/bin/env python

from utils import *
from process import Process

def handle_process(processes, line):
    time, fields = parse_line(line)
    operation = fields[0]
    pid = None
    ppid = None
    target_pid = None
    source_image = None

    if operation == "True-ProcessCreated":
        pid = extract_field(fields[1])
        ppid = extract_field(fields[2])
        source_image = extract_field(fields[3])

    elif (operation == "Proces-memory-write-accessattempt" or 
          operation == "Proces-operation-memory-write-accessattempt" or 
          operation == "Proces-suspend-resume-accessattempt" or 
          operation == "Proces-terminate-attempt" or 
          operation == "Proces-smemory-write-delete-access-attempt"):
        pid = extract_field(fields[2])
        target_pid = extract_field(fields[1])

    elif operation == "Process-Terminated":
        pid = extract_field(fields[1])

    else:
        pass

    if pid is not None:
        #If process is previously unseen, add to list
        if pid not in processes:
            processes[pid] = Process(pid, ppid)
            processes[pid].set_sourceimage(source_image)
            processes[pid].set_firstseen(time)

        #Add created process to list of ppid's children
        if operation == "True-ProcessCreated":
            processes[ppid].add_child(pid)

        #If any of these accesses are requested on non-child pids, increase suspicion
        elif (operation == "Proces-memory-write-accessattempt" or 
              operation == "Proces-operation-memory-write-accessattempt" or 
              operation == "Proces-suspend-resume-accessattempt" or 
              operation == "Proces-terminate-attempt" or 
              operation == "Proces-smemory-write-delete-access-attempt"):
            
            if find_descendant(processes, pid, target_pid) == False:
                processes[pid].add_suspicion(1.0)

        #If a process is termianted, record that fact
        elif operation == "Process-Terminated":
            processes[pid].is_terminated()

        else:
            pass
