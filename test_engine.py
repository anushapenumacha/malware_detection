logfile1 = "C:\\Users\\anush\\Documents\\Courses\\ERMD\\hw5\\all_data.log"
npp = "C:\\Users\\anush\\Documents\\Courses\\ERMD\\hw5\\npp.log"
python_log = "C:\\Users\\anush\\Documents\\Courses\\ERMD\\hw5\\python.log"

def fetch_pid(line):
    line = line.split(',')
    pid = line[1].split(':')[1].strip()
    return pid

def fetch_addr(line):
    line = line.split(',')
    if ("IRP_MJ_WRITE" in line[0]):
        addr = line[2].split(':')[1].strip()
        return addr
    else:
        return None

def fetch_source(line):
    line = line.split(',')
    if("IRP_MJ_READ" in line[0] or "True-ProcessCreated" in line[0]):
        file_name = line[3].split(': ')[1].strip()
        return file_name
    else:
        return None

def fetch_dest(line):
    line = line.split(',')
    if("IRP_MJ_CREATE" in line[0]):
        file_name = line[2].split(':')[1].strip()
        return file_name
    else:
        return None

def fetch_addr(line):
    line = line.split(',')
    if ("IRP_MJ_WRITE" in line[0] or "IRP_MJ_WRITE" in line[0]):
        addr = line[2].split(':')[1].strip()
        return addr
    else:
        return None

def parse_procreate(line):
    line = line.split(',')
    if("True-ProcessCreated" in line[0]):
        pid = line[1].split(': ')[1]
        name = line[3].split(': ')[1]
        return pid,name


def populate_list(file):
    log = open(file)
    line = log.readline()
    event_list = []
    while line:
        event_list.append(line)
        line = log.readline()
    return event_list

def fetch_ppid(line):
    line = line.split(',')
    ppid = line[2].split(':')[1].strip()
    return ppid

def cmp_target(line,mon_pid):
    line = line.split(',')
    target_pid = line[1].split(':')[1].strip()
    writer_pid = line[2].split(':')[1].strip()
    if target_pid != writer_pid and int(target_pid) > 0 and mon_pid in writer_pid:
        return target_pid
    else:
        return None

def fetch_image_name(line):
    line = line.split(',')
    return line[1].split(': ')[1].strip()

def fetch_target(line):
    line = line.split(',')
    if "image-loaded" in line[0]:
        target_pid = line[2].split(' ')[3].strip()
        return target_pid
    else:
        return None

def init_struct(mon_list1,events):
    #Get running monitored applications
    mon_pid = []
    for i in events:
        if mon_list1 in i and 'True-ProcessCreated' in i:
            item = {}
            item["bond"] = "root"
            item["type"] = "process"
            item["pid"] = fetch_pid(i)
            item["source"] = fetch_source(i)
            mon_pid.append(item.copy())

    #Populate the data structure
    for item in mon_pid:
        file_list = []
        filter_list = [i for i in events if item["pid"] in i]
        for i in filter_list:
            if "IRP_MJ_CREATE" in i:
                #print "File created : {}".format(fetch_dest(i))
                file_list.append({fetch_dest(i):"f2"})
        file_list = [dict(t) for t in {tuple(d.items()) for d in file_list}]
        item["file_list"] = file_list



    # Check for write file events
    mal_files = []
    for item in mon_pid:
        files = item["file_list"]
        for file in files:
            file_name = file.keys()[0]
            event_s = [i for i in events if (file_name in i and "IRP_MJ_WRITE" in i and item["pid"] in i)]
            if event_s != None:
                file[file_name] = "f3"
                for _event in event_s:
                    id = int(_event.split('\t')[0])
                    for i in events:
                        diff = id - int(i.split('\t')[0])
                        if diff < 5 and diff > 0:
                            if ("IRP_MJ_READ" in i and
                                    fetch_addr(_event) in i and
                                    item["pid"] in i and
                                    mon_list1 in i):
                                #print item["source"].split('\\')[-1]
                                file[file_name] = "f1"

    for item in mon_pid:
        proc_list = []
        for eve in events:
            if "True-ProcessCreated" in eve and item["pid"] in fetch_ppid(eve):
                pid, name = parse_procreate(eve)
                # print pid, name
                proc_list.append({name: "p2"})
        item["proc_list"] = proc_list


    #print mon_pid
    sus_proc = []
    for item in mon_pid:
        for _event in events:
            if "PROCESS_VM_WRITE" in _event or "PROCESS_ALL_ACCESS" in _event:
                if cmp_target(_event,item["pid"]) != None:
                    target_id = cmp_target(_event,item["pid"])
                    #print target_id
                    id = int(_event.split('\t')[0])
                    #print id
                    for eve in events:
                        if (int(eve.split('\t')[0]) - id < 20 and int(eve.split('\t')[0]) - id > 0) and "image-loaded" in eve and target_id in fetch_target(eve):
                            procid = fetch_target(eve)
                            for eve1 in events:
                                if "True-ProcessCreated" in eve1 and procid in eve1.split(',')[1].strip():
                                    pid, name = parse_procreate(eve1)
                                    found = 0
                                    for proc in item["proc_list"]:
                                        if name in proc.keys()[0]:
                                            found = 1
                                            proc[proc.keys()[0]] = "p1"
                                    if found==0:
                                        proc_list.append({name: "p2"})

    for item in mon_pid:
        reg_list = []
        for eve in events:
            if "run" in eve.lower() and "key" in eve and item["pid"] in eve:
                reg_list.append({eve.split(',')[1].split(':')[1].strip(): "r1"})
            if item["pid"] in eve and "RegNtPreSetValueKey" in eve and "Image File Execution Options" in eve and "VerifierDlls" in eve:
                key_name = eve.split(',')[1].split(':')[1].strip()
                reg_list.append({key_name: "r2"})
                file_list.append({key_name.split('\\')[-1]: 'f4'})
        item["reg_list"] = reg_list
    return mon_pid

def generate_mit(root):
    if root == []:
        return root
    mit = []
    for _file in root[0]["file_list"]:
        _file_name = _file.keys()[0].split('\\')[-1]
        found = 0
        for node in mit:
            if _file_name != '' and _file_name == node.keys()[0]:
                node[_file_name] += ','
                node[_file_name] += _file[_file.keys()[0]]
                found =1

        if found == 0:
            mit.append({_file_name: _file[_file.keys()[0]]})

    for _file in root[0]["proc_list"]:
        _file_name = _file.keys()[0].split('\\')[-1]
        found = 0
        for node in mit:
            if _file_name == node.keys()[0]:
                node[_file_name] += ','
                node[_file_name] += _file[_file.keys()[0]]
                found =1
        if found == 0:
            mit.append({_file_name: _file[_file.keys()[0]]})

    for _file in root[0]["reg_list"]:
        _reg_name = _file.keys()[0]
        found = 0
        for node in mit:
            if _reg_name == node.keys()[0]:
                node[_reg_name] += ','
                node[_reg_name] +=  _file[_reg_name]
                found = 1
        if found == 0:
            mit.append({_reg_name: _file[_reg_name]})

    return mit

def assign_weights(val):
    thres = 0
    for i in val:
        if("f1" in i):
            thres += 100
        if("f2" in i) or ("f3" in i):
            thres += 1
        if ("p1" in i):
            thres += 100
        if("p2" in i):
            thres += 3
        if ("r1" in i):
            thres += 100
        if("r2" in i):
            thres += 100
    return thres


#events = populate_list(logfile1)
#root = init_struct("combined.exe",events)

#events = populate_list(npp)
#root = init_struct("npp.7.7.Installer.x64.exe",events)

#events = populate_list(python_log)
#root = init_struct("python-3.8.2-amd64.exe",events)

def parse_data(root):
    global score
    dat = generate_mit(root)
    for node in dat:
        val = node[node.keys()[0]].split(',')
        print root[0]["source"]+ '-->' +node.keys()[0]+' : '+node[node.keys()[0]]
        score += assign_weights(val)
    if(score > 100):
        score = 100

def parse_sig_file(file_name):
    log = open(file_name)
    line = log.readline()
    event_list = []
    while line:
        event_list.append(line)
        line = log.readline()
    sig_dict = {}
    _names = event_list[0].split('\t')
    _values = event_list[1].split('\t')
    for i in range(len(_names)):
        sig_dict[_names[i]] = _values[i]
    return sig_dict

data_dir_m = "C:\\Users\\anush\\Documents\\Courses\\ERMD\\data_sets\\malware-logs-for-semester-project\\"
'''
file_list_m = ["Virus.Win32.Downloader.av.exe","Virus.Win32.Hidrag.a.exe.exe","Virus.Win32.Horope.l.exe",
             "Virus.Win32.Lamer.f.exe","Virus.Win32.Lamer.i.exe","Virus.Win32.Neshta.a.exe",
             "Virus.Win32.Parite.e.exe","Virus.Win32.Virut.ab.exe",
             "Virus.Win32.Xorer.ef.exe","Virus.Win32.Sality.e.exe"]
'''
file_list_m = ["Virus.Win32.Downloader.av.exe"]
data_dir_b = "C:\\Users\\anush\\Documents\\Courses\\ERMD\\data_sets\\benign-logs-for-semester-project-2020\\"


file_list_b = ["gpupdate.exe","iTunes64Setup.exe","logoff.exe",
               "rdpinit.exe","SearchFilterHost.exe","shvlzm.exe",
               "VMwareHostOpen.exe","WMPDMC.exe","wpnpinst.exe","BitTorrent.exe",]

for file_name in file_list_m:
    #file_name = "Virus.Win32.Downloader.av.exe"
    events = populate_list(data_dir_m+file_name+".log")
    sig_file = data_dir_m + file_name + ".sig"
    sig_data = parse_sig_file(sig_file)
    root = init_struct(file_name,events)
    score = 0
    try:
        if sig_data["Verified"] == "Unsigned":
            score += 10
    except KeyError:
        pass
    print '----------------------------------------------------'
    parse_data(root)
    if root != []:
        for _file in root[0]["file_list"]:
            node1 = _file.keys()[0].split('\\')[-1]
            node_data = init_struct(node1,events)
            parse_data(node_data)

        print "{} with pid {} has an overall score of {}".format(root[0]["source"],root[0]["pid"],(float(score)))
        try:
            print "File {} Signature : {}".format(root[0]["source"],sig_data["Verified"])
            print "File {} Original Name ==> {}".format(root[0]["source"],sig_data["Original Name"])
            print "File {} Copyright ==> {}".format(root[0]["source"],sig_data["Copyright"])
        except KeyError:
            pass
        print '----------------------------------------------------'
    else:
        print "{} was never spawned".format(file_name)
    print('\n\n\n')






