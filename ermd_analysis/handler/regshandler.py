#!/usr/bin/env python

from ermd_analysis.event import *
from ermd_analysis.process import *
from ermd_analysis.handler import EventHandler
from loguru import logger
import re

REG_PERSIST = [
    r'\\REGISTRY\\USER\\[\w-]+\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run',
    r'\\REGISTRY\\USER\\[\w-]+\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
    r'\\REGISTRY\\MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run',
    r'\\REGISTRY\\MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
#    r'\\REGISTRY\\MACHINE\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\Schedule',
    r'\\REGISTRY\\SYSTEM\\CurrentControlSet\\Services'
]

class RegsHandler(EventHandler):
    def __init__(self):
        self.reg_persist = [re.compile(x, re.IGNORECASE) for x in REG_PERSIST]

    def handle(self, fields, tree):
        action = fields[0]

        if (action in 
            (
                'RegNtPreCreateKey',
                'RegNtPreCreateKeyEx'
            )
        ):
            self.handle_createkey(fields, tree)

        elif (action == 'RegNtPreSetValueKey'):
            self.handle_setvalue(fields, tree)

        elif (action == 'RegNtDeleteKey'):
            self.handle_deletekey(fields, tree)

        elif (action == 'RegNtDeleteValueKey'):
            self.handle_deletevalue(fields, tree)

        elif (action == 'RegNtPreRenameKey'):
            self.handle_rename(fields, tree)
                
                
        elif (action == 'RegNtPreReplaceKey'):
            self.handle_replace(fields, tree)

        else:
            return

    def handle_createkey(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])

        if pid not in tree.get_processes():
            return

        if ((key not in tree.regs_created) and
            (any(i.match(key) is not None for i in self.reg_persist))
        ):
            tree.add_regs_created(key, None)
            tree.suspicion += 100.0
            logger.debug(f"Detected attempts at persistence.")

    def handle_setvalue(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])
        value = fields[3]

        if pid not in tree.get_processes():
            return

        if ((key not in tree.regs_modified) and
            (any(i.match(key) is not None for i in self.reg_persist))
        ):
            tree.add_regs_modified(key, None)
            tree.suspicion += 100.0
            logger.debug(f"Detected attempts at persistence")

        
    def handle_deletekey(self,fields, tree):
        key = fields[1]
        pid = int(fields[2])

        if pid not in tree.get_processes():
            return

        if key not in tree.regs_deleted:
            tree.add_regs_deleted(key, None)

    def handle_deletevalue(self, fields, tree):
        key = fields[1]
        value = fields[2]
        pid = int(fields[3])

        if ((key not in tree.regs_modified) and
            (any(i.match(key) is not None for i in self.reg_persist))
        ):
            tree.add_regs_modified(key, None)
            tree.suspicion += 100.0
            logger.debug(f"Detected attempts at persistence")

        if pid not in tree.get_processes():
            return

    def handle_rename(self, fields, tree):
        old_key = fields[1]
        new_key = fields[2]
        pid = int(fields[3])

        if pid not in tree.get_processes():
            return

        if old_key not in tree.regs_deleted:
            tree.add_regs_deleted(key, None)

        if ((new_key not in tree.regs_created) and
            (any(i.match(new_key) is not None for i in self.reg_persist))
        ):
            tree.add_regs_created(key, None)
            tree.suspicion += 100.0
            logger.debug(f"Detected attempts at persistence")

    def handle_replace(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])

        if pid not in tree.get_processes():
            return

        if ((key not in tree.regs_modified) and
            (any(i.match(key) is not None for i in self.reg_persist))
        ):
            tree.add_regs_modified(key, None)
            tree.suspicion += 100.0
            logger.debug(f"Detected attempts at persistence")
