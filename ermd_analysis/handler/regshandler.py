#!/usr/bin/env python

from ermd_analysis.event import *
from ermd_analysis.process import *
from ermd_analysis.handler import EventHandler
from loguru import logger
import re

REG_PERSIST = [
    r'\\REGISTRY\\USER\\[\w-]+\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run',
    r'\\REGISTRY\\USER\\[\w-]+\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
    r'\\REGISTRY\\MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run',
    r'\\REGISTRY\\MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce',
    r'\\REGISTRY\\MACHINE\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\Schedule'
]

class RegsHandler(EventHandler):
    def __init__(self):
        self.reg_persist = [re.compile(x, re.IGNORECASE) for x in REG_PERSIST]

    def handle(self, fields, tree):
        action = fields[0]

        if (action in 
            (
                'RegNtPreCreateKey',
                'RegNtPreCreateKeyEx'
            )
        ):
            self.handle_createkey(fields, tree)

        elif (action == 'RegNtPreSetValueKey'):
            self.handle_setvalue(fields, tree)

        elif (action == 'RegNtDeleteKey'):
            self.handle_deletekey(fields, tree)

        elif (action == 'RegNtDeleteValueKey'):
            self.handle_deletevalue(fields, tree)

        elif (action == 'RegNtPreRenameKey'):
            self.handle_rename(fields, tree)
                
                
        elif (action == 'RegNtPreReplaceKey'):
            self.handle_replace(fields, tree)

        else:
            return

    def handle_createkey(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])

        if (pid not in tree):
            tree[pid] = Process(pid=pid)

        create_event = Event()
        create_event.set_type(REG_CREATE)
        create_event.add_arg('key', key)
        tree[pid].add_event(create_event)

        # Check for persistence related registries
        for i in self.reg_persist:
            if i.match(key) is not None:
                count = tree[pid].bad_actions[TYPE_PERSIST]
                tree[pid].bad_actions[TYPE_PERSIST] = count+1

    def handle_setvalue(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])
        value = fields[3]

        if (pid not in tree):
            tree[pid] = Process(pid=pid)

        setvalue_event = Event()
        setvalue_event.set_type(REG_SETVALUE)
        setvalue_event.add_arg('key', key)
        setvalue_event.add_arg('value', value)
        tree[pid].add_event(setvalue_event)

        # Check for Persistence related registries
        for i in self.reg_persist:
            if i.match(key) is not None:
                count = tree[pid].bad_actions[TYPE_PERSIST]
                tree[pid].bad_actions[TYPE_PERSIST] = count+1
        
    def handle_deletekey(self,fields, tree):
        key = fields[1]
        pid = int(fields[2])

        if (pid not in tree):
            tree[pid] = Process(pid=pid)

        delete_event = Event()
        delete_event.set_type(REG_DELETEKEY)
        delete_event.add_arg('key', key)
        tree[pid].add_event(delete_event)
    
    def handle_deletevalue(self, fields, tree):
        key = fields[1]
        value = fields[2]
        pid = int(fields[3])

        if (pid not in tree):
            tree[pid] = Process(pid=pid)

        delete_event = Event()
        delete_event.set_type(REG_DELETEVAL)
        delete_event.add_arg('key', key)
        delete_event.add_arg('value', value)
        tree[pid].add_event(delete_event)

    def handle_rename(self, fields, tree):
        old_key = fields[1]
        new_key = fields[2]
        pid = int(fields[3])

        if (pid not in tree):
            tree[pid] = Process(pid=pid)

        rename_event = Event()
        rename_event.set_type(REG_RENAME)
        rename_event.add_arg('key', old_key)
        rename_event.add_arg('newkey', new_key)
        tree[pid].add_event(rename_event)

    def handle_replace(self, fields, tree):
        key = fields[1]
        pid = int(fields[2])
        
        if (pid not in tree):
            tree[pid] = Process(pid = pid)

        replace_event = Event()
        replace_event.set_type(REG_REPLACE)
        replace_event.add_arg('key', key)
        tree[pid].add_event(replace_event)
