#!/usr/bin/env python

from ermd_analysis.utils import *
from ermd_analysis.event import *
from ermd_analysis.process import *
from ermd_analysis.handler import EventHandler
from loguru import logger

class FileHandler(EventHandler):
    def __init__(self):
        pass

    def handle(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])
        if (pid not in tree):
            tree[pid] = Process()

        if irp == 'IRP_MJ_CREATE':
            self.handle_create(fields, tree)

        elif irp == 'IRP_MJ_SET_INFORMATION':
            self.handle_set_info(fields, tree)

        elif irp == 'IRP_MJ_WRITE':
            self.handle_write(fields, tree)

        elif irp == 'IRP_MJ_READ':
            self.handle_read(fields, tree)

        else:
            return

    def handle_create(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])
        filename = fields[2][len(DEVICEPATH):]
        disposition = fields[3]

        if (disposition in 
            (
                'FILE_CREATE',
                'FILE_SUPERSEDE',
                'FILE_OPEN_IF',
                'FILE_OVERWRITE_IF'
            )
        ):
            create_event = Event()
            create_event.set_type(FILE_CREATE)
            create_event.add_arg('filename', filename)
            tree[pid].add_event(create_event)
            if filename not in tree[pid].file_created:
                tree[pid].file_created.append(filename)

        if (disposition in
            (
                'FILE_SUPERSEDE',
                'FILE_OVERWRITE',
                'FILE_OVERWRITE_IF'
            )
        ):
            write_event = Event()
            write_event.set_type(FILE_WRITE)
            write_event.add_arg('filename', filename)
            tree[pid].add_event(write_event)
            if filename not in tree[pid].file_written:
                tree[pid].file_written.append(filename)

        if (disposition == 'FILE_OPEN_IF'):
            read_event = Event()
            read_event.set_type(FILE_READ)
            read_event.add_arg('filename', filename)
            read_event.add_arg('address', '<unknown>')
            tree[pid].add_event(read_event)
            if filename not in tree[pid].file_read:
                tree[pid].file_read.append(filename)

    def handle_set_info(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])
        filename = fields[2][len(DEVICEPATH):]
        disposition = fields[3]

        if (disposition == 'deletepending'):
            delete_event = Event()
            delete_event.set_type(FILE_DELETE)
            delete_event.add_arg('filename', filename)
            tree[pid].add_event(delete_event)
            if filename not in tree[pid].file_deleted:
                tree[pid].file_deleted.append(filename)

    def handle_write(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])
        src_addr = fields[2]
        dst_file = fields[3][len(DEVICEPATH):]
        write_event = Event()
        write_event.set_type(FILE_WRITE)
        write_event.add_arg('filename', dst_file)
        write_event.add_arg('address', src_addr)
        tree[pid].add_event(write_event)
        if dst_file not in tree[pid].file_written:
            tree[pid].file_written.append(dst_file)

        for event in reversed(tree[pid].events):
            if event.type == FILE_READ:
                if event.args['address'] == src_addr:
                    tree[pid].bad_actions[TYPE_SELF_REP] += 1

    def handle_read(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])
        dst_addr = fields[2]
        src_file = fields[3][len(DEVICEPATH):]
        read_event = Event()
        read_event.set_type(FILE_READ)
        read_event.add_arg('filename', src_file)
        read_event.add_arg('address', dst_addr)
        tree[pid].add_event(read_event)
        if src_file not in tree[pid].file_read:
            tree[pid].file_read.append(src_file)
