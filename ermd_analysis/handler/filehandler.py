#!/usr/bin/env python

from ermd_analysis.utils import *
from ermd_analysis.event import *
from ermd_analysis.process import *
from ermd_analysis.handler import EventHandler
from loguru import logger

class FileHandler(EventHandler):
    def __init__(self):
        pass

    def handle(self, fields, tree):
        irp = fields[0]
        pid = int(fields[1])

        if pid not in tree.get_processes():
            return

        if irp == 'IRP_MJ_CREATE':
            self.handle_create(fields, tree)

        elif irp == 'IRP_MJ_SET_INFORMATION':
            self.handle_set_info(fields, tree)

        elif irp == 'IRP_MJ_WRITE':
            self.handle_write(fields, tree)

        elif irp == 'IRP_MJ_READ':
            self.handle_read(fields, tree)

        else:
            return

    def handle_create(self, fields, tree):
        irp         = fields[0]
        pid         = int(fields[1])
        filename    = strip_hdr(fields[2])
        disposition = fields[3]

        if (disposition in 
            (
                'FILE_CREATE',
                'FILE_SUPERSEDE',
                'FILE_OPEN_IF',
                'FILE_OVERWRITE_IF'
            )
        ):
            tree.add_file_created(filename, None)

        if (disposition in
            (
                'FILE_SUPERSEDE',
                'FILE_OVERWRITE',
                'FILE_OVERWRITE_IF'
            )
        ):
            tree.add_file_written(filename, None)

        if (disposition == 'FILE_OPEN_IF'):
            tree.add_file_read(filename, None)

    def handle_set_info(self, fields, tree):
        irp         = fields[0]
        pid         = int(fields[1])
        filename    = strip_hdr(fields[2])
        disposition = fields[3]

        if disposition is 'deletepending':
            tree.add_file_deleted(filename, None)

    def handle_write(self, fields, tree):
        irp         = fields[0]
        pid         = int(fields[1])
        src_addr    = fields[2]
        dst_file    = strip_hdr(fields[3])

        tree.add_file_written(dst_file, None)
        cur_proc = tree.processes[pid]
        if src_addr in cur_proc.memory_map:
            if cur_proc.memory_map[src_addr] is cur_proc.get_sourceimage():
                logger.info(f"Self Replication detected in PID {pid}!"
                    " ({cur_proc.get_sourceimage()})")

    def handle_read(self, fields, tree):
        irp         = fields[0]
        pid         = int(fields[1])
        dst_addr    = fields[2]
        src_file    = strip_hdr(fields[3])

        if src_file == tree.processes[tree.root_pid].source_image:
            logger.debug(f"Detected loading of original image. Could be self replication.")

        tree.add_file_read(src_file, None)
        tree.processes[pid].add_memory_map(src_file, dst_addr)
