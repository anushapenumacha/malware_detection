#!/usr/bin/env python

TYPE_SELF_REP   = 'm0'
TYPE_PERSIST    = 'm1'
TYPE_INJECTION  = 'm2'
TYPE_TMPEXE     = 'm3'


class Process:
    def __init__(self, pid=None, ppid=None):
        self.pid = pid
        self.ppid = ppid
        self.source_image   = None
        self.read_self      = False
        self.events         = []
        self.children       = []
        self.file_created   = []
        self.file_written   = []
        self.file_read      = []
        self.file_deleted   = []
        self.proc_injected  = []
        self.proc_injectee  = []
        
        self.bad_actions = {
            TYPE_SELF_REP:  0,
            TYPE_PERSIST:   0,
            TYPE_INJECTION: 0,
            TYPE_TMPEXE:    0
        }

        self.suspicion = 0.0
    
    def set_parent(self, ppid):
        self.ppid = ppid

    def get_parent(self):
        return self.ppid

    def get_sourceimage(self):
        return self.source_image

    def set_sourceimage(self, filename):
        self.source_image = filename

    def add_event(self, event):
        self.events.append(event)

    def add_child(self, child):
        if child not in self.children:
            self.children.append(child)

    def get_descendants(self, tree):
        descendants = []
        for child in self.children:
            if child not in descendants:
                descendants.append(child)
            if len(tree[child].children) > 0:
                descendants = descendants + tree[child].get_descendants(tree)
        return descendants

    def get_ancestors(self, tree):
        ancestors = []
        if self.ppid is not None:
            if self.ppid not in ancestors:
                ancestors.append(ppid)
            if tree[ppid].ppid is not None:
                ancestors += tree[ppid].get_ancestors()
        return ancestors

    def set_suspicion(self, score):
        self.suspicion = score
