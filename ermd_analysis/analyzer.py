#!/usr/bin/env python

from loguru import logger
import json

from ermd_analysis.utils import *
from ermd_analysis.process import *
from ermd_analysis.tree import Tree
from ermd_analysis.handler.filehandler import FileHandler
from ermd_analysis.handler.prochandler import ProcHandler
from ermd_analysis.handler.regshandler import RegsHandler

FILE = [
    'IRP_MJ_CREATE',
    'IRP_MJ_READ',
    'IRP_MJ_WRITE',
    'IRP_MJ_SET_INFORMATION'
]

PROC = [
    'Proces-memory-write-accessattempt',
    'Proces-operation-memory-write-accessattempt',
    'Proces-suspend-resume-accessattempt',
    'Proce-smemory-write-delete-access-attempt',
    'Proces-terminate-attempt',
    'image-loaded',
    'True-ProcessCreated',
    'Process-Terminated'
]

REGS = [
    'RegNtPreCreateKeyEX',
    'RegNtPreCreateKey',
    'RegNtSetValueKey',
    'RegNtPreSetValueKey',
    'RegNtDeleteKey',
    'RegNtDeleteValueKey',
    'RegNtPreRenameKey',
    'RegNtPreReplaceKey'
]

class Analyzer:
    def __init__(self):
        #Initialize Tree and various handlers
        self.tree = Tree()
        self.file = FileHandler()
        self.proc = ProcHandler()
        self.regs = RegsHandler()

    def parse_signature(self, file_name):
        logger.debug(f"Analyzing signature file : {file_name}...")
        log = open(file_name)
        line = log.readline()
        event_list = []
        while line:
            event_list.append(line)
            line = log.readline()
        sig_dict = {}
        _names = event_list[0].split('\t')
        _values = event_list[1].split('\t')
        for i in range(len(_names)):
            sig_dict[_names[i]] = _values[i]
        try:
            if sig_dict["Verified"] == "Unsigned":
                self.tree.unsigned == True
                self.tree.suspicion += 10.0
        except KeyError:
            pass

    def analyze(self, config, logfile, outputfile):
        header = False
        with open(logfile, 'r') as fp:
            for line in fp:
                if header is False:
                    fields = parse_line(line)
                    pid = int(fields[1])
                    ppid = int(fields[2])
                    source_image = strip_hdr(fields[3])
                    self.tree.set_root(pid=pid, ppid=ppid, image=source_image)
                    header = True
                    
                fields = parse_line(line)
                if fields[0] in FILE:
                    self.file.handle(fields, self.tree)

                elif fields[0] in PROC:
                    self.proc.handle(fields, self.tree)

                elif fields[0] in REGS:
                    self.regs.handle(fields, self.tree)

                else:
                    continue

        with open(outputfile, 'w') as fp:
            json.dump(self.tree.print_tree(), fp, indent=3)

def parse_line(line):
    line = line[line.find("@@@ ") + 4:]
    fields = [extract(x) for x in line.split(',')]
    return fields

def extract(field):
    if ':' in field:
        split_fields = field.split(':')
        return ''.join(split_fields[1:]).strip()
    else:
        return field
