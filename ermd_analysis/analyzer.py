#!/usr/bin/env python

from loguru import logger

from ermd_analysis.utils import *
from ermd_analysis.process import *
from ermd_analysis.handler.filehandler import FileHandler
from ermd_analysis.handler.prochandler import ProcHandler
from ermd_analysis.handler.regshandler import RegsHandler

FILE = [
    'IRP_MJ_CREATE',
    'IRP_MJ_READ',
    'IRP_MJ_WRITE',
    'IRP_MJ_SET_INFORMATION'
]

PROC = [
    'Proces-memory-write-accessattempt',
    'Proces-operation-memory-write-accessattempt',
    'Proces-suspend-resume-accessattempt',
    'Proce-smemory-write-delete-access-attempt',
    'Proces-terminate-attempt',
    'image-loaded',
    'True-ProcessCreated',
    'Process-Terminated'
]

REGS = [
    'RegNtPreCreateKeyEX',
    'RegNtPreCreateKey',
    'RegNtSetValueKey',
    'RegNtPreSetValueKey',
    'RegNtDeleteKey',
    'RegNtDeleteValueKey',
    'RegNtPreRenameKey',
    'RegNtPreReplaceKey'
]

class Analyzer:
    def __init__(self):
        self.tree = {}
        self.file = FileHandler()
        self.proc = ProcHandler()
        self.regs = RegsHandler()


    def analyze(self, config, logfile, outputfile):
        with open(logfile, 'r') as fp:
            for line in fp:
                fields = parse_line(line)
                if fields[0] in FILE:
                    self.file.handle(fields, self.tree)
                elif fields[0] in PROC:
                    self.proc.handle(fields, self.tree)
                elif fields[0] in REGS:
                    self.regs.handle(fields, self.tree)
                else:
                    continue

        for pid in sorted(self.tree.keys()):
            bad_actions = self.tree[pid].bad_actions
            multipliers = config.score_multipliers()
            score = 0
            score += bad_actions[TYPE_SELF_REP] * multipliers['self_rep']
            score += bad_actions[TYPE_PERSIST] * multipliers['persistence']
            score += bad_actions[TYPE_INJECTION] * multipliers['injection']
            score += bad_actions[TYPE_TMPEXE] * multipliers['temp_exe']

            self.tree[pid].set_suspicion(score)

            if score > 100:
                logger.info(f"PID {pid} ({self.tree[pid].get_sourceimage()}) is suspicious!")


#        for pid in sorted(self.tree.keys()):
#            logger.info(f"PID: {pid} | Source Image: {self.tree[pid].get_sourceimage()}")
#            if self.tree[pid].bad_actions[TYPE_PERSIST] is not 0:
#                logger.info(f"\tPersistence: {self.tree[pid].bad_actions[TYPE_PERSIST]}")
#            if self.tree[pid].bad_actions[TYPE_INJECTION] is not 0:
#                logger.info(f"\tInjection: {self.tree[pid].bad_actions[TYPE_INJECTION]}")
#            if self.tree[pid].bad_actions[TYPE_SELF_REP] is not 0:
#                logger.info(f"\tSelf Replication: {self.tree[pid].bad_actions[TYPE_SELF_REP]}")
#            if self.tree[pid].bad_actions[TYPE_TMPEXE] is not 0:
#                logger.info(f"\tTemp folder executables: {self.tree[pid].bad_actions[TYPE_TMPEXE]}")

    def analyze_tree(self, tree):
        pass

def parse_line(line):
    line = line[line.find("@@@ ") + 4:]
    fields = [extract(x) for x in line.split(',')]
    return fields

def extract(field):
    if ':' in field:
        split_fields = field.split(':')
        return ''.join(split_fields[1:]).strip()
    else:
        return field
