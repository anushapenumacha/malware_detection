#!/usr/bin/env python

from ermd_analysis.event import *
from ermd_analysis.process import Process
from loguru import logger

class Tree:
    def __init__(self):
        self.root_pid = None     # Root Process PID
        self.processes      = {} # All processes of the tree
        self.file_created   = {} # Dict of all files created by tree
        self.file_read      = {} # Dict of all files read by tree (Delete?)
        self.file_written   = {} # Dict of all files written by tree
        self.file_deleted   = {} # Dict of all files deleted by tree
        self.file_directory = [] # List of all directories access by tree
        self.regs_created   = {} # Dict of all registries created by tree
        self.regs_modified  = {} # Dict of all registries modified by tree
        self.regs_deleted   = {} # Dict of all registries deleted by tree
        self.proc_injected  = [] # List of all processes injected into 
        self.events         = [] # List of all malicious events in sequence
        
        self.suspicion = 0.0

    def set_root(self, pid, ppid, image):
        logger.debug(f"Setting tree root as PID {pid}")
        logger.debug(f"Source Image: {image}")
        self.root_pid = pid
        self.processes[pid] = Process(pid=pid, ppid=ppid, image=image)

    def add_process(self, pid, ppid, image):
        if ppid not in self.processes:
            logger.debug(f"PPID {ppid} not found in list of our processes.")
            return

        if pid in self.processes:
            logger.debug(f"PID {pid} already in our list of processes.")
            return

        logger.debug(f"Adding PID {pid} created by PPID {ppid}...")
        logger.debug(f"Source Image: {image}")
        self.processes[pid] = Process(pid=pid, ppid=ppid, image=image)
        self.processes[ppid].add_child(pid)

    def get_processes(self):
        return self.processes

    def add_file_created(self, filename, file_obj):
        if filename not in self.file_created:
            self.file_created[filename] = file_obj

    def add_file_read(self, filename, file_obj):
        if filename not in self.file_read:
            self.file_read[filename] = file_obj

    def add_file_written(self, filename, file_obj):
        if filename not in self.file_written:
            self.file_written[filename] = file_obj

    def add_file_deleted(self, filename, file_obj):
        if filename not in self.file_deleted:
            self.file_deleted[filename] = file_obj
    
    def add_regs_created(self, key, reg_obj):
        if key not in self.regs_created:
            self.regs_created[key] = reg_obj

    def add_regs_modified(self, key, reg_obj):
        if key not in self.regs_modified:
            self.regs_modified[key] = reg_obj

    def add_regs_deleted(self, key, reg_obj):
        if key not in self.regs_deleted:
            self.regs_deleted[key] = reg_obj

    def add_event(self, event):
        self.events.append(event)

    def search_event(self, event, num):
        count = 0
        for elem in self.events[-num:]:
            if elem.get_type() == event.get_type():
                count += 1
        return count/num

    def print_tree(self):
        tree_json = {}
        tree_json['tree'] = self.processes[self.root_pid].dump(self)
        tree_json['injected_processes'] = self.proc_injected
        tree_json['self_replicates'] = []
        for filename in self.file_created:
            if self.file_created[filename].self_rep:
                tree_json['self_replicates'].append(filename)

        return tree_json
