#!/usr/bin/env python

from ermd_analysis.process import Process
from loguru import logger

class Tree:
    def __init__(self):
        self.root_pid = None         # Root Process object
        self.processes      = {} # List of all PIDs in tree
        self.file_created   = {}
        self.file_read      = {}
        self.file_written   = {}
        self.file_deleted   = {}
        self.regs_created   = {}
        self.regs_modified  = {}
        self.regs_deleted   = {}
        
        self.suspicion = 0.0

    def set_root(self, pid, ppid, image):
        logger.debug(f"Setting tree root as PID {pid}")
        logger.debug(f"Source Image: {image}")
        self.root_pid = pid
        self.processes[pid] = Process(pid=pid, ppid=ppid, image=image)

    def add_process(self, pid, ppid, image):
        if ppid not in self.processes:
            logger.debug(f"PPID {ppid} not found in list of our processes.")
            return

        if pid in self.processes:
            logger.debug(f"PID {pid} already in our list of processes.")
            return

        logger.debug(f"Adding PID {pid} created by PPID {ppid}...")
        logger.debug(f"Source Image: {image}")
        self.processes[pid] = Process(pid=pid, ppid=ppid, image=image)
        self.processes[ppid].add_child(pid)

    def get_processes(self):
        return self.processes

    def add_file_created(self, filename, file_obj):
        if filename not in self.file_created:
            self.file_created[filename] = file_obj

    def add_file_read(self, filename, file_obj):
        if filename not in self.file_read:
            self.file_read[filename] = file_obj

    def add_file_written(self, filename, file_obj):
        if filename not in self.file_written:
            self.file_written[filename] = file_obj

    def add_file_deleted(self, filename, file_obj):
        if filename not in self.file_deleted:
            self.file_deleted[filename] = file_obj
    
    def add_regs_created(self, key, reg_obj):
        if key not in self.regs_created:
            self.regs_created[key] = reg_obj

    def add_regs_modified(self, key, reg_obj):
        if key not in self.regs_modified:
            self.regs_modified[key] = reg_obj

    def add_regs_deleted(self, key, reg_obj):
        if key not in self.regs_deleted:
            self.regs_deleted[key] = reg_obj
